using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace SmartContractsGenerator.Validators
{
    public sealed class NameValidator
    {
        private static readonly Regex regex = new Regex(@"[a-zA-Z_]\w*");
        public static bool IsValidName(string name)
        {
            if (string.IsNullOrWhiteSpace(name))
            {
                return false;
            }
            else
            {
                var match = regex.Match(name);
                return match.Success && match.Length == name.Length && !IsInBannedWordsList(name);
            }
        }

        private static bool IsInBannedWordsList(string name)
        {
            return KeyWords.Contains(name);
        }

        private static readonly HashSet<string> KeyWords = new HashSet<string>()
        {
            "public",
            "balance",
            "function",
            "true",
            "i",
            "false",
            "bool",
            "constructor",
            "blockhash",
            "contract",
            "solidity",
            "pragma",
            "super",
            "this",
            "returns",
            "import",
            "from",
            "emit",
            "as",
            "while",
            "return",
            "if",
            "for",
            "else",
            "do",
            "continue",
            "break",
            "throw",
            "new",
            "delete",
            "unchecked",
            "typeof",
            "typedef",
            "type",
            "try",
            "switch",
            "supports",
            "static",
            "sizeof",
            "sealed",
            "relocatable",
            "reference",
            "promise",
            "partial",
            "override",
            "of",
            "null",
            "mutable",
            "match",
            "macro",
            "let",
            "inline",
            "in",
            "implements",
            "immutable",
            "final",
            "define",
            "default",
            "copyof",
            "catch",
            "case",
            "auto",
            "apply",
            "alias",
            "after",
            "abstract",
            "int256",
            "uint256",
            "bytes32",
            "int248",
            "uint248",
            "bytes31",
            "int240",
            "uint240",
            "bytes30",
            "int232",
            "uint232",
            "bytes29",
            "int224",
            "uint224",
            "bytes28",
            "int216",
            "uint216",
            "bytes27",
            "int208",
            "uint208",
            "bytes26",
            "int200",
            "uint200",
            "bytes25",
            "int192",
            "uint192",
            "bytes24",
            "int184",
            "uint184",
            "bytes23",
            "int176",
            "uint176",
            "bytes22",
            "int168",
            "uint168",
            "bytes21",
            "int160",
            "uint160",
            "bytes20",
            "int152",
            "uint152",
            "bytes19",
            "int144",
            "uint144",
            "bytes18",
            "int136",
            "uint136",
            "bytes17",
            "int128",
            "uint128",
            "bytes16",
            "int120",
            "uint120",
            "bytes15",
            "int112",
            "uint112",
            "bytes14",
            "int104",
            "uint104",
            "bytes13",
            "int96",
            "uint96",
            "bytes12",
            "int88",
            "uint88",
            "bytes11",
            "int80",
            "uint80",
            "bytes10",
            "int72",
            "uint72",
            "bytes9",
            "int64",
            "uint64",
            "bytes8",
            "int56",
            "uint56",
            "bytes7",
            "int48",
            "uint48",
            "bytes6",
            "int40",
            "uint40",
            "bytes5",
            "int32",
            "uint32",
            "bytes4",
            "int24",
            "uint24",
            "bytes3",
            "int16",
            "uint16",
            "bytes2",
            "int8",
            "uint8",
            "bytes1",
            "uint",
            "int",
            "byte",
            "address",
            "bool",
            "var",
            "enum",
            "mapping",
            "struct",
            "modifier",
            "event",
            "constructor",
            "function",
            "interface",
            "library",
            "contract",
            "string",
            "bytes",
            "is",
            "calldata",
            "memory",
            "storage",
            "view",
            "pure",
            "payable",
            "constant",
            "internal",
            "external",
            "public",
            "private",
            "indexed",
            "anonymous",
            "sha256",
            "selfdestruct",
            "ripemd160",
            "revert",
            "require",
            "mulmod",
            "keccak256",
            "gasleft",
            "ecrecover",
            "blockhash",
            "assert",
            "addmod",
            "suicide",
            "sha3",
            "now",
            "false",
            "true",
            "ether",
            "finney",
            "szabo",
            "wei",
            "weeks",
            "days",
            "hours",
            "minutes",
            "seconds",
            "years"
        };

    }
}
